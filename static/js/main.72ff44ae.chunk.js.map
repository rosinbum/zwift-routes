{"version":3,"sources":["components/appbar/stylesheet.ts","components/appbar/index.tsx","pages/stylesheet.tsx","pages/index.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","emptyIcon","display","marginRight","spacing","padding","width","leftIconButton","title","flexGrow","ApplicationBar","props","style","leftIconComponent","className","leftIcon","leftIconProps","color","edge","onClick","onLeftIconPressed","IconButton","AppBar","Toolbar","Typography","variant","root","flexFlow","height","left","margin","position","top","mainSection","overflowY","MainApplication","console","log","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kRAoBeA,EAfGC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,QAAS,eACTC,YAAaH,EAAMI,QAAQ,GAC3BC,QAASL,EAAMI,QAAQ,GACvBE,MAAO,UAETC,eAAgB,CACdJ,YAAaH,EAAMI,QAAQ,IAE7BI,MAAO,CACLC,SAAU,OC6CCC,EA/BgC,SAACC,GAC9C,IAAMC,EAAQd,IAEVe,EAAoB,yBAAKC,UAAWF,EAAMX,YAC9C,GAAIU,EAAMI,SAAU,CAClB,IAAMC,EAAiC,CACrC,aAAcL,EAAMI,SACpBD,UAAWF,EAAML,eACjBU,MAAO,UACPC,KAAM,QACNC,QAAS,WAAQR,EAAMS,mBAAqBT,EAAMS,sBAEpDP,EACE,kBAACQ,EAAA,EAAeL,EACM,SAAnBL,EAAMI,SAAsB,kBAAC,IAAD,MAAe,kBAAC,IAAD,OAKlD,OACE,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGV,EACD,kBAACW,EAAA,EAAD,CAAYC,QAAQ,KAAKX,UAAWF,EAAMJ,OACvCG,EAAMH,UC5BFV,EAnBGC,YAAW,CAC3B2B,KAAM,CACJxB,QAAS,OACTyB,SAAU,gBACVC,OAAQ,OACRC,KAAM,EACNC,OAAQ,EACRzB,QAAS,EACT0B,SAAU,WACVC,IAAK,EACL1B,MAAO,QAET2B,YAAa,CACX/B,QAAS,QACTO,SAAU,EACVyB,UAAW,YCMAC,EApBwB,WACrC,IAAMvB,EAAQd,IAMd,OACE,yBAAKgB,UAAWF,EAAMc,MACpB,kBAAC,EAAD,CACEX,SAAS,OACTK,kBARoB,WACxBgB,QAAQC,IAAI,wCAQR7B,MAAM,iBACR,6BAASM,UAAWF,EAAMqB,aACxB,8C,MCVYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,IAASC,OAAO,mBAPI,kBAClB,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,SAIY,MAAiBC,SAASC,eAAe,SD6HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.72ff44ae.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\n/**\r\n * Stylesheet for the application bar.\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  emptyIcon: {\r\n    display: 'inline-block',\r\n    marginRight: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    width: '1.5rem'\r\n  },\r\n  leftIconButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default useStyles;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport BackIcon from '@material-ui/icons/ArrowBack';\r\nimport IconButton, { IconButtonProps } from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useStyles from './stylesheet';\r\n\r\ninterface AppBarProps {\r\n  /**\r\n   * The left icon to display\r\n   */\r\n  leftIcon?: \"menu\" | \"back\",\r\n\r\n  /**\r\n   * The event handler to call when the left icon is pressed\r\n   */\r\n  onLeftIconPressed?: () => void,\r\n\r\n  /**\r\n   * The title on the application bar\r\n   */\r\n  title: string\r\n}\r\n\r\n/**\r\n * The top Application Bar\r\n * @param props component properties\r\n */\r\nconst ApplicationBar: React.SFC<AppBarProps> = (props) => {\r\n  const style = useStyles();\r\n\r\n  let leftIconComponent = <div className={style.emptyIcon}/>;\r\n  if (props.leftIcon) {\r\n    const leftIconProps: IconButtonProps = {\r\n      'aria-label': props.leftIcon,\r\n      className: style.leftIconButton,\r\n      color: 'inherit',\r\n      edge: 'start',\r\n      onClick: () => { props.onLeftIconPressed && props.onLeftIconPressed(); }\r\n    };\r\n    leftIconComponent = (\r\n      <IconButton {...leftIconProps}>\r\n        {props.leftIcon === \"menu\" ? <MenuIcon /> : <BackIcon />}\r\n      </IconButton>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AppBar>\r\n      <Toolbar>\r\n        {leftIconComponent}\r\n        <Typography variant=\"h6\" className={style.title}>\r\n          {props.title}\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default ApplicationBar;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\n/**\r\n * Stylesheet for the main application.  This implements a full-page\r\n * flexbox with a main section that \"grows\" and scrolls the content\r\n * vertically.\r\n */\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: 'flex',\r\n    flexFlow: 'column nowrap',\r\n    height: '100%',\r\n    left: 0,\r\n    margin: 0,\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 0,\r\n    width: '100%'\r\n  },\r\n  mainSection: {\r\n    display: 'block',\r\n    flexGrow: 1,\r\n    overflowY: 'scroll'\r\n  }\r\n});\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport AppBar from 'components/appbar';\r\nimport useStyles from './stylesheet';\r\n \r\n/**\r\n * The main application component, which is needed to set up the routing\r\n * context for the application.\r\n */\r\nconst MainApplication: React.SFC<{}> = () => {\r\n  const style = useStyles();\r\n\r\n  const onLeftIconPressed = () => {\r\n    console.log('Main Application: Left Icon Pressed');\r\n  }\r\n\r\n  return (\r\n    <div className={style.root}>\r\n      <AppBar\r\n        leftIcon=\"back\"\r\n        onLeftIconPressed={onLeftIconPressed}\r\n        title=\"Zwift Routes\"/>\r\n      <section className={style.mainSection}>\r\n        <p>Main Content</p>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainApplication;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport MainApplication from 'pages';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nconst Application = () => (\n  <React.Fragment>\n    <CssBaseline />\n    <MainApplication />\n  </React.Fragment>\n);\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}