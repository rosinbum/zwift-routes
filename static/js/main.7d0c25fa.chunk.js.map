{"version":3,"sources":["components/application-bar/stylesheet.js","components/application-bar/ApplicationBar.jsx","pages/route-details/stylesheet.js","pages/route-details/index.jsx","app-state/models/ZwiftRoute.js","pages/route-list/RouteListItem.jsx","pages/formatters.js","pages/route-list/RouteList.jsx","pages/settings/stylesheet.js","pages/settings/IncludeFilter.jsx","pages/settings/ZwiftWorldFilter.jsx","app-state/reducers/routes.js","app-state/actions/loadRoutes.js","app-state/reducers/settings.js","pages/settings/ZwiftSportFilter.jsx","pages/settings/sortFields.js","pages/settings/SortFieldSetting.jsx","pages/settings/index.jsx","pages/route-list/stylesheet.js","pages/route-list/index.jsx","pages/MainApplication.jsx","app-state/reducers/index.js","app-state/store.js","serviceWorker.js","index.jsx"],"names":["useStyles","makeStyles","theme","emptyIcon","display","marginRight","spacing","padding","width","leftIconButton","title","flexGrow","ApplicationBar","leftIcon","onLeftIconPressed","style","leftProps","className","color","edge","onClick","leftComponent","IconButton","AppBar","position","Toolbar","Typography","variant","defaultProps","root","flexFlow","height","left","margin","top","content","overflowY","RouteDetailsPage","history","useHistory","id","useParams","goBack","ZwiftRoute","PropTypes","string","isRequired","number","bool","jsonObject","this","data","sports","toLowerCase","world","startCase","hasCompletedRoute","routeUpdate","isCompleted","settings","filter_world","listOfWorlds","include_watopia","push","includes","zwiftWorld","include_completed","include_eventonly","isEventOnly","filter_sport","isForCycling","isForRunning","difficulty","eventonly","indexOf","leadin_distance","leadin_elevation","level","name","distance","elevation","link","RouteListItem","displayUnits","route","icon","fontSize","green","grey","km","toFixed","fmt","routeDistance","elevationGain","m","routeElevationGain","secondaryText","ListItem","button","divider","ListItemAvatar","ListItemText","secondary","routeName","RouteList","routes","onSelectRoute","List","map","r","key","checkControl","paddingLeft","formControl","minWidth","formGroup","marginTop","secondTitle","palette","primary","contrastText","IncludeFilter","fieldName","onSettingsChanged","value","FormControlLabel","control","Checkbox","label","onChange","event","target","checked","ZwiftWorldFilter","worlds","FormControl","InputLabel","htmlFor","Select","MenuItem","LOAD_ROUTES_ACTION","Symbol","for","UPDATE_ROUTE_ACTION","loadRoutesActionCreator","type","ROUTES_URI","process","UPDATE_SETTINGS","initialState","sort_field","display_units","ZwiftSportFilter","routeNameSortComparator","a","b","aa","bb","supportedSortFields","comparator","totalDistance","totalElevationGain","SortFieldSetting","Object","keys","SettingsForm","dispatch","useDispatch","useSelector","state","uniq","sort","changeSettings","changes","payload","FormGroup","v","RouteListPage","sortField","React","useState","drawer","setDrawer","filteredRoutes","filter","fitsFilters","setDrawerVisibility","Drawer","anchor","open","onClose","MainApplication","path","combineReducers","action","routeId","updateRoute","middleware","applyMiddleware","createLogger","collapsed","thunkMiddleware","store","createStore","appReducer","fetch","response","console","debug","status","Error","statusText","json","error","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7d0c25fa.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\n/**\r\n * Style sheet in the application bar.\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  emptyIcon: {\r\n    display: 'inline-block',\r\n    marginRight: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    width: '1.5rem'\r\n  },\r\n  leftIconButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport BackIcon from '@material-ui/icons/ArrowBackIosOutlined';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useStyles from './stylesheet';\r\n\r\n/**\r\n * Pure component for a reactive application bar.  Applies the corporate standard style.\r\n *\r\n * @param {Object} props the component props.\r\n * @param {string} props.leftIcon the name of the icon on the left-hand side.\r\n * @param {function} props.onLeftIconPressed event handler when the leftIcon is pressed.\r\n * @param {string} props.title the application bar title\r\n */\r\nconst ApplicationBar = ({ leftIcon, onLeftIconPressed, title }) => {\r\n  const style = useStyles();\r\n\r\n  const leftProps = {\r\n    'aria-label': leftIcon,\r\n    className: style.leftIconButton,\r\n    color: 'inherit',\r\n    edge: 'start',\r\n    onClick: onLeftIconPressed\r\n  };\r\n  let leftComponent = <div className={style.emptyIcon} />;\r\n  if (leftIcon !== 'none') {\r\n    leftComponent = (\r\n      <IconButton {...leftProps}>\r\n        {leftIcon === 'menu' ? <MenuIcon /> : <BackIcon />}\r\n      </IconButton>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AppBar position=\"relative\">\r\n      <Toolbar>\r\n        {leftComponent}\r\n        <Typography variant=\"h6\" className={style.title}>{title}</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nApplicationBar.propTypes = {\r\n  leftIcon: PropTypes.oneOf(['back', 'menu', 'none']),\r\n  onLeftIconPressed: PropTypes.func,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nApplicationBar.defaultProps = {\r\n  leftIcon: 'none',\r\n  onLeftIconPressed: () => { /* Do nothing */ }\r\n};\r\n\r\nexport default ApplicationBar;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\n/**\r\n * Stylesheet for the detailed route page\r\n */\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: 'flex',\r\n    flexFlow: 'column nowrap',\r\n    height: '100%',\r\n    left: 0,\r\n    margin: 0,\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 0,\r\n    width: '100%'\r\n  },\r\n  content: {\r\n    display: 'block',\r\n    flexGrow: 1,\r\n    overflowY: 'scroll'\r\n  }\r\n});\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { ApplicationBar } from '../../components';\r\nimport useStyles from './stylesheet';\r\n\r\nconst RouteDetailsPage = () => {\r\n  const style = useStyles();\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n\r\n  return (\r\n    <div className={style.root}>\r\n      <ApplicationBar\r\n        leftIcon=\"back\"\r\n        onLeftIconPressed={() => history.goBack()}\r\n        title=\"Route Details\"\r\n      />\r\n      <div className={style.content}>\r\n        <p>{`Detailed route content for ${id}`}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouteDetailsPage;\r\n","import PropTypes from 'prop-types';\r\nimport startCase from 'lodash/startCase';\r\n\r\n/**\r\n * Definition of the ZwiftRoute for PropTypes purposes.\r\n */\r\nexport const ZwiftRoutePropTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  difficulty: PropTypes.number.isRequired,\r\n  isCompleted: PropTypes.bool.isRequired,\r\n  isEventOnly: PropTypes.bool.isRequired,\r\n  isForCycling: PropTypes.bool.isRequired,\r\n  isForRunning: PropTypes.bool.isRequired,\r\n  leadinDistance: PropTypes.number.isRequired,\r\n  leadinElevationGain: PropTypes.number.isRequired,\r\n  minimumZwiftLevel: PropTypes.number.isRequired,\r\n  routeName: PropTypes.string.isRequired,\r\n  routeDistance: PropTypes.number.isRequired,\r\n  routeElevationGain: PropTypes.number.isRequired,\r\n  totalDistance: PropTypes.number.isRequired,\r\n  totalElevationGain: PropTypes.number.isRequired,\r\n  zwiftInsiderLink: PropTypes.string.isRequired,\r\n  zwiftWorld: PropTypes.string.isRequired\r\n};\r\n\r\n/**\r\n * Definition of a Zwift Route.\r\n */\r\nexport default class ZwiftRoute {\r\n  /**\r\n   * Creates a new ZwiftRoute based on the one of the objects received from\r\n   * downloading the routes.json file.\r\n   *\r\n   * @param {ZwiftRouteInput} jsonObject an entry from the routes.json file\r\n   */\r\n  constructor(jsonObject) {\r\n    this.data = jsonObject;\r\n    this.data.sports = jsonObject.sports.toLowerCase();\r\n    this.data.world = startCase(jsonObject.world);\r\n    this.hasCompletedRoute = false;\r\n  }\r\n\r\n  /**\r\n   * @return the unique ID of the route.\r\n   */\r\n  get id() {\r\n    return this.data.id;\r\n  }\r\n\r\n  /**\r\n   * @return the VeloViewer objective difficulty rating (0 means no rating)\r\n   */\r\n  get difficulty() {\r\n    return this.data.difficulty;\r\n  }\r\n\r\n  /**\r\n   * @return true if the current user has completed the route.\r\n   */\r\n  get isCompleted() {\r\n    return this.hasCompletedRoute;\r\n  }\r\n\r\n  /**\r\n   * @return true if this route is an \"Event Only\" route.\r\n   */\r\n  get isEventOnly() {\r\n    return this.data.eventonly;\r\n  }\r\n\r\n  /**\r\n   * @return true if this route is for cycling.\r\n   */\r\n  get isForCycling() {\r\n    return ['all', 'cycling'].indexOf(this.data.sports) !== -1;\r\n  }\r\n\r\n  /**\r\n   * @return true if this route is for running.\r\n   */\r\n  get isForRunning() {\r\n    return ['all', 'running'].indexOf(this.data.sports) !== -1;\r\n  }\r\n\r\n  /**\r\n   * @return the distance from the drop-point to the start of the route, in km.\r\n   */\r\n  get leadinDistance() {\r\n    return this.data.leadin_distance;\r\n  }\r\n\r\n  /**\r\n   * @return the elevation gain from the drop-point to the start of the route, in m.\r\n   */\r\n  get leadinElevationGain() {\r\n    return this.data.leadin_elevation;\r\n  }\r\n\r\n  /**\r\n   * @return the minimum Zwift level needed to use the route.\r\n   */\r\n  get minimumZwiftLevel() {\r\n    return this.data.level || 0;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the route\r\n   */\r\n  get routeName() {\r\n    return this.data.name;\r\n  }\r\n\r\n  /**\r\n   * @return the official distance of the route, in km.\r\n   */\r\n  get routeDistance() {\r\n    return this.data.distance;\r\n  }\r\n\r\n  /**\r\n   * @return the official elevation gain of the route, in m.\r\n   */\r\n  get routeElevationGain() {\r\n    return this.data.elevation;\r\n  }\r\n\r\n  /**\r\n   * @return the total distance (official distance + lead-in), in km.\r\n   */\r\n  get totalDistance() {\r\n    return this.data.distance + this.data.leadin_distance;\r\n  }\r\n\r\n  /**\r\n   * @return the total elevation gain (official elevation gain + lead-in), in m.\r\n   */\r\n  get totalElevationGain() {\r\n    return this.data.elevation + this.data.leadin_elevation;\r\n  }\r\n\r\n  /**\r\n   * Link to the Zwift Insider route page, or an empty string if no page.\r\n   */\r\n  get zwiftInsiderLink() {\r\n    return this.data.link || '';\r\n  }\r\n\r\n  /**\r\n   * The type of sports that can be ridden on this route\r\n   */\r\n  get zwiftSport() {\r\n    return this.data.sports;\r\n  }\r\n\r\n  /**\r\n   * @return the Zwift world where this route is located.\r\n   */\r\n  get zwiftWorld() {\r\n    return this.data.world;\r\n  }\r\n\r\n  /**\r\n   * Updates the route settings that are not read-only.  Currently, you can only set\r\n   * the completed flag.\r\n   *\r\n   * @param {RouteUpdate} routeUpdate the update instructions\r\n   * @param {boolean} routeUpdate.isCompleted sets the route to completed by this user\r\n   */\r\n  updateRoute(routeUpdate) {\r\n    if ('isCompleted' in routeUpdate) {\r\n      this.hasCompletedRoute = routeUpdate.isCompleted;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current route fits the settings.\r\n   *\r\n   * @param {Object} settings\r\n   * @param {string} settings.filter_world world name or '*'\r\n   * @param {boolean} settings.include_watopia also include watopia\r\n   * @returns true if the route fits the filters.\r\n   */\r\n  fitsFilters(settings) {\r\n    if (settings.filter_world !== '*') {\r\n      const listOfWorlds = [settings.filter_world];\r\n      if (settings.include_watopia) {\r\n        listOfWorlds.push('Watopia');\r\n      }\r\n      if (!listOfWorlds.includes(this.zwiftWorld)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (!settings.include_completed && this.isCompleted) {\r\n      return false;\r\n    }\r\n\r\n    if (!settings.include_eventonly && this.isEventOnly) {\r\n      return false;\r\n    }\r\n\r\n    if (settings.filter_sport === 'cycling' && !this.isForCycling) {\r\n      return false;\r\n    }\r\n    if (settings.filter_sport === 'running' && !this.isForRunning) {\r\n      return false;\r\n    }\r\n\r\n    // If we haven't been filtered out, we are in!\r\n    return true;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport NotCompletedIcon from '@material-ui/icons/CancelOutlined';\r\nimport CompletedIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport { green, grey } from '@material-ui/core/colors';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ZwiftRoutePropTypes } from '../../app-state/models/ZwiftRoute';\r\nimport * as fmt from '../formatters';\r\n\r\nconst RouteListItem = ({ displayUnits, onClick, route }) => {\r\n  const icon = route.isCompleted\r\n    ? <CompletedIcon fontSize=\"large\" style={{ color: green[500] }} />\r\n    : <NotCompletedIcon fontSize=\"large\" style={{ color: grey[500] }} />;\r\n\r\n  const distance = fmt.formatDistance(route.routeDistance, displayUnits);\r\n  const elevation = fmt.formatElevationGain(route.routeElevationGain, displayUnits);\r\n  const difficulty = route.difficulty.toFixed(2);\r\n  const secondaryText = `${distance}, ${elevation}, difficulty ${difficulty}`;\r\n\r\n  return (\r\n    <ListItem button divider onClick={onClick}>\r\n      <ListItemAvatar>{icon}</ListItemAvatar>\r\n      <ListItemText secondary={secondaryText}>\r\n        <Typography variant=\"h6\">{route.routeName}</Typography>\r\n      </ListItemText>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nRouteListItem.propTypes = {\r\n  displayUnits: PropTypes.oneOf(['imperial', 'metric']),\r\n  onClick: PropTypes.func.isRequired,\r\n  route: PropTypes.shape(ZwiftRoutePropTypes).isRequired\r\n};\r\n\r\nRouteListItem.defaultProps = {\r\n  displayUnits: 'metric'\r\n};\r\n\r\nexport default RouteListItem;\r\n","/**\r\n * Conversion utility - converts kilometers to miles.\r\n */\r\nexport const toMiles = (km) => km * 0.6214;\r\n\r\n/**\r\n * Conversion utility - converts meters to feet.\r\n */\r\nexport const toFeet = (m) => m * 3.2808;\r\n\r\n/**\r\n * Display formatter for distance\r\n */\r\nexport const formatDistance = (distance, displayUnits) => {\r\n  if (displayUnits === 'imperial') {\r\n    return `${toMiles(distance).toFixed(1)}mi`;\r\n  }\r\n  return `${distance.toFixed(1)}km`;\r\n};\r\n\r\n/**\r\n * Display formatter for elevation gain\r\n */\r\nexport const formatElevationGain = (elevationGain, displayUnits) => {\r\n  if (displayUnits === 'imperial') {\r\n    return `${toFeet(elevationGain).toFixed(0)}ft`;\r\n  }\r\n  return `${elevationGain.toFixed(0)}m`;\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport List from '@material-ui/core/List';\r\nimport RouteListItem from './RouteListItem';\r\nimport { ZwiftRoutePropTypes } from '../../app-state/models/ZwiftRoute';\r\n\r\nconst RouteList = ({ routes, onSelectRoute }) => {\r\n  /**\r\n   * Event handler to display the Zwift Route details.\r\n   *\r\n   * @param {ZwiftRoute} route the zwift route to display\r\n   */\r\n  const onClick = (route) => () => { onSelectRoute(route); };\r\n\r\n  return (\r\n    <List>\r\n      {routes.map((r) => (<RouteListItem key={r.id} onClick={onClick(r)} route={r} />))}\r\n    </List>\r\n  );\r\n};\r\n\r\n// TODO: Adjust PropTypes.array to PropTypes.arrayOf(ZwiftRoute)\r\nRouteList.propTypes = {\r\n  routes: PropTypes.arrayOf(\r\n    PropTypes.shape(ZwiftRoutePropTypes)\r\n  ).isRequired,\r\n  onSelectRoute: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RouteList;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  checkControl: {\r\n    paddingLeft: theme.spacing(1)\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120\r\n  },\r\n  formGroup: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  root: {\r\n    minWidth: '15rem'\r\n  },\r\n  secondTitle: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.contrastText,\r\n    paddingLeft: theme.spacing(0.5)\r\n  }\r\n}));\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport useStyles from './stylesheet';\r\n\r\nconst IncludeFilter = ({ fieldName, onSettingsChanged, value }) => {\r\n  const style = useStyles();\r\n\r\n  const onChange = (event) => {\r\n    onSettingsChanged(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <FormControlLabel\r\n      className={style.checkControl}\r\n      control={<Checkbox color=\"primary\" />}\r\n      label={`Include ${fieldName}`}\r\n      onChange={onChange}\r\n      checked={value}\r\n    />\r\n  );\r\n};\r\n\r\nIncludeFilter.propTypes = {\r\n  fieldName: PropTypes.string.isRequired,\r\n  onSettingsChanged: PropTypes.func.isRequired,\r\n  value: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default IncludeFilter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport useStyles from './stylesheet';\r\n\r\nconst ZwiftWorldFilter = ({ onSettingsChanged, value, worlds }) => {\r\n  const style = useStyles();\r\n\r\n  const onChange = (event) => {\r\n    onSettingsChanged(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <FormControl className={style.formControl}>\r\n      <InputLabel htmlFor=\"zwift-world\">World</InputLabel>\r\n      <Select value={value} onChange={onChange}>\r\n        <MenuItem value=\"*\">All</MenuItem>\r\n        {worlds.map((world) => (\r\n          <MenuItem key={world} value={world}>{world}</MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nZwiftWorldFilter.propTypes = {\r\n  onSettingsChanged: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  worlds: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default ZwiftWorldFilter;\r\n","import ZwiftRoute from '../models/ZwiftRoute';\r\n\r\nconst LOAD_ROUTES_ACTION = Symbol.for('route.loadRoutes');\r\nconst UPDATE_ROUTE_ACTION = Symbol.for('route.updateRoute');\r\n\r\n/**\r\n * Action Creator to dispatch once you have a list of routes.\r\n * This will update the list of routes with the new routes.\r\n *\r\n * @param {ZwiftRoute[]} routes the list of routes to load\r\n */\r\nexport const loadRoutesActionCreator = (routes) => ({\r\n  type: LOAD_ROUTES_ACTION,\r\n  routes\r\n});\r\n\r\n/**\r\n * Action creator to mark or clear a route as completed.\r\n *\r\n * @param {string} routeId ID of the route to update\r\n * @param {*} instructions the update to the route\r\n */\r\nexport const completeRouteActionCreator = (routeId, isCompleted) => ({\r\n  type: UPDATE_ROUTE_ACTION,\r\n  routeId,\r\n  routeUpdate: { isCompleted }\r\n});\r\n\r\n/**\r\n * Redux reducer.  It's job is to return a NEW state (state is immutable)\r\n * with the required changes.\r\n *\r\n * @param {ZwiftRoute[]} state the current state\r\n * @param {Action} action the action to perform on the state\r\n * @returns new state\r\n */\r\nexport default function reducer(state = [], action) {\r\n  switch (action.type) {\r\n    case LOAD_ROUTES_ACTION:\r\n      return action.routes.map((route) => new ZwiftRoute(route));\r\n    case UPDATE_ROUTE_ACTION:\r\n      return state.map((r) => (r.id === action.routeId ? r.updateRoute(action.routeUpdate) : r));\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import fetch from 'cross-fetch';\r\nimport { loadRoutesActionCreator } from '../reducers/routes';\r\n\r\n/* eslint-disable no-console */\r\n\r\nconst ROUTES_URI = `${process.env.PUBLIC_URL}/routes.json`;\r\n\r\n/**\r\n * Load the basic routes structure and user data.  Currently, the routes.json file is on\r\n * the public endpoint, and the user data is in localStorage.\r\n */\r\nexport default function loadRoutes() {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await fetch(ROUTES_URI);\r\n      console.debug(response);\r\n      if (response.status !== 200) {\r\n        throw new Error(`Response returned error code ${response.status} ${response.statusText}`);\r\n      }\r\n      const routes = await response.json();\r\n      console.debug(routes);\r\n      dispatch(loadRoutesActionCreator(routes));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n}\r\n","const UPDATE_SETTINGS = Symbol.for('settings.update');\r\n\r\n/**\r\n * Action Creator to update settings.\r\n *\r\n * @param {object} payload\r\n */\r\nexport const updateSettings = (payload) => ({\r\n  type: UPDATE_SETTINGS,\r\n  payload\r\n});\r\n\r\nconst initialState = {\r\n  filter_world: '*',\r\n  filter_sport: 'cycling',\r\n  include_completed: false,\r\n  include_eventonly: false,\r\n  include_watopia: true,\r\n  sort_field: 'difficulty',\r\n  display_units: 'imperial'\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case UPDATE_SETTINGS:\r\n      return { ...state, ...action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport useStyles from './stylesheet';\r\n\r\nconst ZwiftSportFilter = ({ onSettingsChanged, value }) => {\r\n  const style = useStyles();\r\n\r\n  const onChange = (event) => {\r\n    onSettingsChanged(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <FormControl className={style.formControl}>\r\n      <InputLabel htmlFor=\"zwift-sport\">Sport</InputLabel>\r\n      <Select value={value} onChange={onChange}>\r\n        <MenuItem value=\"all\">All sports</MenuItem>\r\n        <MenuItem value=\"cycling\">Cycling</MenuItem>\r\n        <MenuItem value=\"running\">Running</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nZwiftSportFilter.propTypes = {\r\n  onSettingsChanged: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ZwiftSportFilter;\r\n","const routeNameSortComparator = (a, b) => {\r\n  const aa = a.routeName.toLowerCase();\r\n  const bb = b.routeName.toLowerCase();\r\n  if (aa === bb) return 0;\r\n  return (aa < bb) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * List of supported sort fields by the route list.\r\n * This is used in settings to provide a drop-down selector.\r\n */\r\nexport const supportedSortFields = {\r\n  difficulty: {\r\n    title: 'Difficulty',\r\n    comparator: (a, b) => a.difficulty - b.difficulty\r\n  },\r\n  routeDistance: {\r\n    title: 'Route Distance',\r\n    comparator: (a, b) => a.routeDistance - b.routeDistance\r\n  },\r\n  routeElevationGain: {\r\n    title: 'Route Elevation Gain',\r\n    comparator: (a, b) => a.routeElevationGain - b.routeElevationGain\r\n  },\r\n  totalDistance: {\r\n    title: 'Total Distance',\r\n    comparator: (a, b) => a.totalDistance - b.totalDistance\r\n  },\r\n  totalElevationGain: {\r\n    title: 'Total Elevation Gain',\r\n    comparator: (a, b) => a.totalElevationGain - b.totalElevationGain\r\n  },\r\n  routeName: {\r\n    title: 'Route Name',\r\n    comparator: routeNameSortComparator\r\n  }\r\n};\r\n\r\n/**\r\n * Returns the sort comparator for a specific sort field.\r\n *\r\n * @param {string} sortField\r\n */\r\nexport const sortComparator = (sortField) => {\r\n  if (sortField in supportedSortFields) {\r\n    return supportedSortFields[sortField].comparator;\r\n  }\r\n  return routeNameSortComparator;\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport useStyles from './stylesheet';\r\nimport { supportedSortFields } from './sortFields';\r\n\r\nconst SortFieldSetting = ({ onSettingsChanged, value }) => {\r\n  const style = useStyles();\r\n\r\n  const onChange = (event) => {\r\n    onSettingsChanged(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <FormControl className={style.formControl}>\r\n      <InputLabel htmlFor=\"zwift-sort-field\">Sort Field</InputLabel>\r\n      <Select value={value} onChange={onChange}>\r\n        {Object.keys(supportedSortFields).map((key) => (\r\n          <MenuItem key={key} value={key}>\r\n            {supportedSortFields[key].title}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nSortFieldSetting.propTypes = {\r\n  onSettingsChanged: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired\r\n};\r\n\r\nexport default SortFieldSetting;\r\n","import React from 'react';\r\nimport uniq from 'lodash/uniq';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IncludeFilter from './IncludeFilter';\r\nimport ZwiftWorldFilter from './ZwiftWorldFilter';\r\nimport useStyles from './stylesheet';\r\nimport { updateSettings } from '../../app-state/actions';\r\nimport ZwiftSportFilter from './ZwiftSportFilter';\r\nimport SortFieldSetting from './SortFieldSetting';\r\n\r\nconst SettingsForm = () => {\r\n  const style = useStyles();\r\n  const dispatch = useDispatch();\r\n  const settings = useSelector((state) => state.settings);\r\n  const routes = useSelector((state) => state.routes);\r\n  const worlds = uniq(routes.map((r) => r.zwiftWorld)).sort();\r\n\r\n  const changeSettings = (changes) => {\r\n    dispatch(updateSettings(changes));\r\n  };\r\n\r\n  return (\r\n    <div className={style.root}>\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={style.title}>Filters</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <FormGroup className={style.formGroup}>\r\n        <ZwiftWorldFilter\r\n          onSettingsChanged={(v) => changeSettings({ filter_world: v })}\r\n          value={settings.filter_world}\r\n          worlds={worlds}\r\n        />\r\n        <IncludeFilter\r\n          fieldName=\"Watopia rides\"\r\n          onSettingsChanged={(v) => changeSettings({ include_watopia: v })}\r\n          value={settings.include_watopia}\r\n        />\r\n        <IncludeFilter\r\n          fieldName=\"completed rides\"\r\n          onSettingsChanged={(v) => changeSettings({ include_completed: v })}\r\n          value={settings.include_completed}\r\n        />\r\n        <IncludeFilter\r\n          fieldName=\"'Event Only' rides\"\r\n          onSettingsChanged={(v) => changeSettings({ include_eventonly: v })}\r\n          value={settings.include_eventonly}\r\n        />\r\n        <ZwiftSportFilter\r\n          onSettingsChanged={(v) => changeSettings({ filter_sport: v })}\r\n          value={settings.filter_sport}\r\n        />\r\n      </FormGroup>\r\n      <AppBar position=\"relative\" className={style.secondTitle}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={style.title}>Settings</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <FormGroup className={style.formGroup}>\r\n        <SortFieldSetting\r\n          onSettingsChanged={(v) => changeSettings({ sort_field: v })}\r\n          value={settings.sort_field}\r\n        />\r\n      </FormGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsForm;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\n/**\r\n * Stylesheet for the list routes page\r\n */\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: 'flex',\r\n    flexFlow: 'column nowrap',\r\n    height: '100%',\r\n    left: 0,\r\n    margin: 0,\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 0,\r\n    width: '100%'\r\n  },\r\n  content: {\r\n    display: 'block',\r\n    flexGrow: 1,\r\n    overflowY: 'scroll'\r\n  }\r\n});\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { ApplicationBar } from '../../components';\r\nimport RouteList from './RouteList';\r\nimport SettingsForm from '../settings';\r\nimport { sortComparator } from '../settings/sortFields';\r\nimport useStyles from './stylesheet';\r\n\r\nconst RouteListPage = () => {\r\n  const style = useStyles();\r\n  const history = useHistory();\r\n  const [drawer, setDrawer] = React.useState(false);\r\n  const routes = useSelector((state) => state.routes);\r\n  const settings = useSelector((state) => state.settings);\r\n  const filteredRoutes = routes\r\n    .filter((route) => route.fitsFilters(settings))\r\n    .sort(sortComparator(settings.sort_field));\r\n\r\n  /**\r\n   * Event handler to show or hide the drawer.\r\n   *\r\n   * @param {boolean} state new state for the drawer (true = open)\r\n   */\r\n  const setDrawerVisibility = (state) => () => { setDrawer(state); };\r\n\r\n  /**\r\n   * Event handler that routes to the details page.\r\n   *\r\n   * @param {ZwiftRoute} route show this Zwift Route.\r\n   */\r\n  const onSelectRoute = (route) => { history.push(`/route/${route.id}`); };\r\n\r\n  return (\r\n    <div className={style.root}>\r\n      <ApplicationBar\r\n        leftIcon=\"menu\"\r\n        onLeftIconPressed={setDrawerVisibility(true)}\r\n        title=\"Zwift Routes\"\r\n      />\r\n      <div className={style.content}>\r\n        <RouteList routes={filteredRoutes} onSelectRoute={onSelectRoute} />\r\n      </div>\r\n      <Drawer anchor=\"left\" open={drawer} onClose={setDrawerVisibility(false)}>\r\n        <SettingsForm />\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouteListPage;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport RouteDetailsPage from './route-details';\r\nimport RouteListPage from './route-list';\r\n\r\nconst MainApplication = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/route/:id\"><RouteDetailsPage /></Route>\r\n      <Route path=\"/\"><RouteListPage /></Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default MainApplication;\r\n","import { combineReducers } from 'redux';\r\nimport routeReducer from './routes';\r\nimport settingsReducer from './settings';\r\n\r\nexport default combineReducers({\r\n  routes: routeReducer,\r\n  settings: settingsReducer\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport appReducer from './reducers';\r\nimport { loadRoutes } from './actions';\r\n\r\n/*\r\n * Standard boilerplate Redux store recipe for creating\r\n * a Flux-like store.\r\n */\r\nconst middleware = applyMiddleware(\r\n  createLogger({ collapsed: true }),\r\n  thunkMiddleware\r\n);\r\nconst store = createStore(appReducer, middleware);\r\nexport default store;\r\n\r\n// Initialize the store\r\nstore.dispatch(loadRoutes());\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { MainApplication } from './pages';\r\nimport store from './app-state/store';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst Application = () => (\r\n  <Provider store={store}>\r\n    <>\r\n      <CssBaseline />\r\n      <MainApplication />\r\n    </>\r\n  </Provider>\r\n\r\n);\r\n\r\nReactDOM.render(<Application />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}